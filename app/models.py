"""
Studreg, Hafakulta's student union membership management system.

Copyright (C) 2014,2015 Yuval Langer.

This file is part of Studreg.

Studreg is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Studreg is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with Studreg.  If not, see <http://www.gnu.org/licenses/>.
"""


from builtins import str

from app import db


class User(db.Model):
    idn = db.Column(db.Integer, primary_key=True)
    nickname = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    posts = db.relationship('Post', backref='author', lazy='dynamic')






    # http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins
    def is_authenticated(self):
        """
        The is_authenticated method has a misleading name. In general this method should just return True unless the object represents a user that should not be allowed to authenticate for some reason.
        """
        return True

    # http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins
    def is_active(self):
        """
        The is_active method should return True for users unless they are inactive, for example because they have been banned.
        """
        return True

    # http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins
    def is_anonymous(self):
        """The is_anonymous method should return True only for fake users that are not supposed to log in to the system.
        """
        return False

    # http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins
    def get_id(self):
        """Finally, the get_id method should return a unique identifier for the user, in unicode format. We use the unique id generated by the database layer for this. Note that due to the differences in unicode handling between Python 2 and 3 we have to provide two alternative versions of this method.
        """
        return str(self.idn)

    def __repr__(self):
        return '<User {!r}>'.format(self.nickname)


class Student(db.Model):
    idn = db.Column(db.Integer, primary_key=True)
    first_name = db.Column(db.String(140))
    last_name = db.Column(db.String(140))
    email = db.Column(db.String(140))
    id_card_number = db.Column(db.String(140), unique=True)
    events = db.relationship('Event', backref='students', lazy='dynamic')

    def __repr__(self):
        return '<Student {!r}>'.format(self.id_card_number)


class Event(db.Model):
    idn = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.DateTime)
    name = db.Column(db.String(140))
    description = db.Column(db.String(512))
